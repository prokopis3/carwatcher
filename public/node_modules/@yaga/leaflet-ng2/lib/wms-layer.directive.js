"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var leaflet_1 = require("leaflet");
var consts_1 = require("./consts");
var map_component_1 = require("./map.component");
var WmsLayerDirective = (function (_super) {
    __extends(WmsLayerDirective, _super);
    function WmsLayerDirective(mapComponent) {
        var _this = 
        // Transparent 1px image:
        _super.call(this, consts_1.TRANSPARENT_PIXEL, { layers: '' }) || this;
        _this.urlChange = new core_1.EventEmitter();
        _this.displayChange = new core_1.EventEmitter();
        _this.opacityChange = new core_1.EventEmitter();
        _this.zIndexChange = new core_1.EventEmitter();
        _this.layersChange = new core_1.EventEmitter();
        _this.stylesChange = new core_1.EventEmitter();
        _this.formatChange = new core_1.EventEmitter();
        _this.versionChange = new core_1.EventEmitter();
        _this.transparentChange = new core_1.EventEmitter();
        _this.addEvent = new core_1.EventEmitter();
        _this.removeEvent = new core_1.EventEmitter();
        _this.popupopenEvent = new core_1.EventEmitter();
        _this.popupcloseEvent = new core_1.EventEmitter();
        _this.tooltipopenEvent = new core_1.EventEmitter();
        _this.tooltipcloseEvent = new core_1.EventEmitter();
        _this.clickEvent = new core_1.EventEmitter();
        _this.dbclickEvent = new core_1.EventEmitter();
        _this.mousedownEvent = new core_1.EventEmitter();
        _this.mouseoverEvent = new core_1.EventEmitter();
        _this.mouseoutEvent = new core_1.EventEmitter();
        _this.contextmenuEvent = new core_1.EventEmitter();
        _this.loadingEvent = new core_1.EventEmitter();
        _this.tileunloadEvent = new core_1.EventEmitter();
        _this.tileloadstartEvent = new core_1.EventEmitter();
        _this.tileerrorEvent = new core_1.EventEmitter();
        _this.tileloadEvent = new core_1.EventEmitter();
        _this.loadEvent = new core_1.EventEmitter();
        _this.on('remove', function () {
            _this.displayChange.emit(false);
        });
        _this.on('add', function () {
            _this.displayChange.emit(true);
        });
        _this.addTo(mapComponent);
        // Events
        _this.on('add', function (event) {
            _this.addEvent.emit(event);
        });
        _this.on('remove', function (event) {
            _this.removeEvent.emit(event);
        });
        _this.on('popupopen', function (event) {
            _this.popupopenEvent.emit(event);
        });
        _this.on('popupclose', function (event) {
            _this.popupcloseEvent.emit(event);
        });
        _this.on('tooltipopen', function (event) {
            _this.tooltipopenEvent.emit(event);
        });
        _this.on('tooltipclose', function (event) {
            _this.tooltipcloseEvent.emit(event);
        });
        _this.on('click', function (event) {
            _this.clickEvent.emit(event);
        });
        _this.on('dbclick', function (event) {
            _this.dbclickEvent.emit(event);
        });
        _this.on('mousedown', function (event) {
            _this.mousedownEvent.emit(event);
        });
        _this.on('mouseover', function (event) {
            _this.mouseoverEvent.emit(event);
        });
        _this.on('mouseout', function (event) {
            _this.mouseoutEvent.emit(event);
        });
        _this.on('contextmenu', function (event) {
            _this.contextmenuEvent.emit(event);
        });
        _this.on('loading', function (event) {
            _this.loadingEvent.emit(event);
        });
        _this.on('tileunload', function (event) {
            _this.tileunloadEvent.emit(event);
        });
        _this.on('tileloadstart', function (event) {
            _this.tileloadstartEvent.emit(event);
        });
        _this.on('tileerror', function (event) {
            _this.tileerrorEvent.emit(event);
        });
        _this.on('tileload', function (event) {
            _this.tileloadEvent.emit(event);
        });
        _this.on('load', function (event) {
            _this.loadEvent.emit(event);
        });
        return _this;
    }
    WmsLayerDirective.prototype.ngOnDestroy = function () {
        this.removeFrom(this._map);
    };
    WmsLayerDirective.prototype.setUrl = function (url, noRedraw) {
        if (this.url === url) {
            return;
        }
        this.urlChange.emit(url);
        return _super.prototype.setUrl.call(this, url, noRedraw);
    };
    Object.defineProperty(WmsLayerDirective.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (val) {
            this.setUrl(val);
        },
        enumerable: true,
        configurable: true
    });
    WmsLayerDirective.prototype.setOpacity = function (val) {
        if (this.opacity === val) {
            return;
        }
        this.opacityChange.emit(val);
        return _super.prototype.setOpacity.call(this, val);
    };
    Object.defineProperty(WmsLayerDirective.prototype, "opacity", {
        get: function () {
            return this.options.opacity;
        },
        set: function (val) {
            this.setOpacity(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "display", {
        get: function () {
            var pane;
            var container;
            try {
                pane = this.getPane();
                container = this.getContainer();
            }
            catch (err) {
                /* istanbul ignore next */
                return false;
            }
            for (var i = 0; i < pane.children.length; i += 1) {
                /* istanbul ignore else */
                if (pane.children[i] === container) {
                    return true;
                }
            }
            return false;
        },
        set: function (val) {
            var isDisplayed = this.display;
            if (isDisplayed === val) {
                return;
            }
            var pane;
            var container;
            var map;
            var events; // Dictionary of functions
            var eventKeys;
            try {
                pane = this.getPane();
                container = this.getContainer();
                map = this._map;
                events = this.getEvents();
                eventKeys = Object.keys(events);
            }
            catch (err) {
                /* istanbul ignore next */
                return;
            }
            if (val) {
                // show layer
                pane.appendChild(container);
                for (var i = 0; i < eventKeys.length; i += 1) {
                    map.on(eventKeys[i], events[eventKeys[i]], this);
                }
                this.redraw();
            }
            else {
                // hide layer
                pane.removeChild(container);
                for (var i = 0; i < eventKeys.length; i += 1) {
                    map.off(eventKeys[i], events[eventKeys[i]], this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    WmsLayerDirective.prototype.setZIndex = function (val) {
        _super.prototype.setZIndex.call(this, val);
        this.zIndexChange.emit(val);
        return this;
    };
    Object.defineProperty(WmsLayerDirective.prototype, "zIndex", {
        get: function () {
            return this.options.zIndex;
        },
        set: function (val) {
            this.setZIndex(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "tileSize", {
        get: function () {
            return this.options.tileSize;
        },
        set: function (val) {
            this.options.tileSize = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "updateWhenIdle", {
        get: function () {
            return this.options.updateWhenIdle;
        },
        set: function (val) {
            this.options.updateWhenIdle = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "updateWhenZooming", {
        get: function () {
            return this.options.updateWhenZooming;
        },
        set: function (val) {
            this.options.updateWhenZooming = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "updateInterval", {
        get: function () {
            return this.options.updateInterval;
        },
        set: function (val) {
            this.options.updateInterval = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "bounds", {
        get: function () {
            return this.options.bounds;
        },
        set: function (val) {
            this.options.bounds = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "noWrap", {
        get: function () {
            return this.options.noWrap;
        },
        set: function (val) {
            this.options.noWrap = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "className", {
        get: function () {
            return this.options.className;
        },
        set: function (val) {
            this.options.className = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "keepBuffer", {
        get: function () {
            return this.options.keepBuffer;
        },
        set: function (val) {
            this.options.keepBuffer = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "maxNativeZoom", {
        get: function () {
            return this.options.maxNativeZoom;
        },
        set: function (val) {
            this.options.maxNativeZoom = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "minNativeZoom", {
        get: function () {
            return this.options.minNativeZoom;
        },
        set: function (val) {
            this.options.minNativeZoom = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "subdomains", {
        get: function () {
            if (typeof this.options.subdomains === 'string') {
                this.options.subdomains = this.options.subdomains.split('');
            }
            return this.options.subdomains;
        },
        set: function (val) {
            this.options.subdomains = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "errorTileUrl", {
        get: function () {
            return this.options.errorTileUrl;
        },
        set: function (val) {
            this.options.errorTileUrl = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "zoomOffset", {
        get: function () {
            return this.options.zoomOffset;
        },
        set: function (val) {
            this.options.zoomOffset = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "tms", {
        get: function () {
            return this.options.tms;
        },
        set: function (val) {
            this.options.tms = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "zoomReverse", {
        get: function () {
            return this.options.zoomReverse;
        },
        set: function (val) {
            this.options.zoomReverse = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "detectRetina", {
        get: function () {
            return this.options.detectRetina;
        },
        set: function (val) {
            this.options.detectRetina = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "crossOrigin", {
        get: function () {
            return this.options.crossOrigin;
        },
        set: function (val) {
            this.options.crossOrigin = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "uppercase", {
        get: function () {
            return this.options.uppercase;
        },
        set: function (val) {
            this.options.uppercase = val;
        },
        enumerable: true,
        configurable: true
    });
    // WMS Params
    WmsLayerDirective.prototype.setParams = function (params, redraw) {
        _super.prototype.setParams.call(this, params, redraw);
        this.layersChange.emit(this.wmsParams.layers.split(','));
        this.stylesChange.emit(this.wmsParams.styles.split(','));
        this.formatChange.emit(this.wmsParams.format);
        this.versionChange.emit(this.wmsParams.version);
        this.transparentChange.emit(this.wmsParams.transparent);
        return this;
    };
    Object.defineProperty(WmsLayerDirective.prototype, "layers", {
        get: function () {
            return this.wmsParams.layers.split(',');
        },
        set: function (val) {
            var newParams = Object.create(this.wmsParams);
            newParams.layers = val.join(',');
            this.setParams(newParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "styles", {
        get: function () {
            return this.wmsParams.styles.split(',');
        },
        set: function (val) {
            var newParams = Object.create(this.wmsParams);
            newParams.styles = val.join(',');
            this.setParams(newParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "format", {
        get: function () {
            return this.wmsParams.format;
        },
        set: function (val) {
            var newParams = Object.create(this.wmsParams);
            newParams.format = val;
            this.setParams(newParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "version", {
        get: function () {
            return this.wmsParams.version;
        },
        set: function (val) {
            var newParams = Object.create(this.wmsParams);
            newParams.version = val;
            this.setParams(newParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "transparent", {
        get: function () {
            return this.wmsParams.transparent;
        },
        set: function (val) {
            var newParams = Object.create(this.wmsParams);
            newParams.transparent = val;
            this.setParams(newParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WmsLayerDirective.prototype, "attribution", {
        get: function () {
            return this.getAttribution();
        },
        /**
         * Input for the attribution.
         * Use it with `<yaga-wms-layer [attribution]="someValue">`
         * @link http://leafletjs.com/reference-1.0.2.html#wmslayer-attribution Original Leaflet documentation
         */
        set: function (val) {
            if (this._map && this._map.attributionControl) {
                this._map.attributionControl.removeAttribution(this.getAttribution());
                this._map.attributionControl.addAttribution(val);
            }
            this.options.attribution = val;
        },
        enumerable: true,
        configurable: true
    });
    return WmsLayerDirective;
}(leaflet_1.TileLayer.WMS));
WmsLayerDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'yaga-wms-layer',
            },] },
];
/** @nocollapse */
WmsLayerDirective.ctorParameters = function () { return [
    { type: map_component_1.MapComponent, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () { return map_component_1.MapComponent; }),] },] },
]; };
WmsLayerDirective.propDecorators = {
    'urlChange': [{ type: core_1.Output },],
    'displayChange': [{ type: core_1.Output },],
    'opacityChange': [{ type: core_1.Output },],
    'zIndexChange': [{ type: core_1.Output },],
    'layersChange': [{ type: core_1.Output },],
    'stylesChange': [{ type: core_1.Output },],
    'formatChange': [{ type: core_1.Output },],
    'versionChange': [{ type: core_1.Output },],
    'transparentChange': [{ type: core_1.Output },],
    'addEvent': [{ type: core_1.Output, args: ['add',] },],
    'removeEvent': [{ type: core_1.Output, args: ['remove',] },],
    'popupopenEvent': [{ type: core_1.Output, args: ['popupopen',] },],
    'popupcloseEvent': [{ type: core_1.Output, args: ['popupclose',] },],
    'tooltipopenEvent': [{ type: core_1.Output, args: ['tooltipopen',] },],
    'tooltipcloseEvent': [{ type: core_1.Output, args: ['tooltipclose',] },],
    'clickEvent': [{ type: core_1.Output, args: ['click',] },],
    'dbclickEvent': [{ type: core_1.Output, args: ['dbclick',] },],
    'mousedownEvent': [{ type: core_1.Output, args: ['mousedown',] },],
    'mouseoverEvent': [{ type: core_1.Output, args: ['mouseover',] },],
    'mouseoutEvent': [{ type: core_1.Output, args: ['mouseout',] },],
    'contextmenuEvent': [{ type: core_1.Output, args: ['contextmenu',] },],
    'loadingEvent': [{ type: core_1.Output, args: ['loading',] },],
    'tileunloadEvent': [{ type: core_1.Output, args: ['tileunload',] },],
    'tileloadstartEvent': [{ type: core_1.Output, args: ['tileloadstart',] },],
    'tileerrorEvent': [{ type: core_1.Output, args: ['tileerror',] },],
    'tileloadEvent': [{ type: core_1.Output, args: ['tileload',] },],
    'loadEvent': [{ type: core_1.Output, args: ['load',] },],
    'url': [{ type: core_1.Input },],
    'opacity': [{ type: core_1.Input },],
    'display': [{ type: core_1.Input },],
    'zIndex': [{ type: core_1.Input },],
    'tileSize': [{ type: core_1.Input },],
    'updateWhenIdle': [{ type: core_1.Input },],
    'updateWhenZooming': [{ type: core_1.Input },],
    'updateInterval': [{ type: core_1.Input },],
    'bounds': [{ type: core_1.Input },],
    'noWrap': [{ type: core_1.Input },],
    'className': [{ type: core_1.Input },],
    'keepBuffer': [{ type: core_1.Input },],
    'maxNativeZoom': [{ type: core_1.Input },],
    'minNativeZoom': [{ type: core_1.Input },],
    'subdomains': [{ type: core_1.Input },],
    'errorTileUrl': [{ type: core_1.Input },],
    'zoomOffset': [{ type: core_1.Input },],
    'tms': [{ type: core_1.Input },],
    'zoomReverse': [{ type: core_1.Input },],
    'detectRetina': [{ type: core_1.Input },],
    'crossOrigin': [{ type: core_1.Input },],
    'uppercase': [{ type: core_1.Input },],
    'layers': [{ type: core_1.Input },],
    'styles': [{ type: core_1.Input },],
    'format': [{ type: core_1.Input },],
    'version': [{ type: core_1.Input },],
    'transparent': [{ type: core_1.Input },],
    'attribution': [{ type: core_1.Input },],
};
exports.WmsLayerDirective = WmsLayerDirective;
//# sourceMappingURL=wms-layer.directive.js.map