/// <reference types="leaflet" />
import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import { Event, FillRule, LatLng, LatLngExpression, LatLngTuple, LineCapShape, LineJoinShape, PathOptions, Polyline, PolylineOptions, PopupEvent, TooltipEvent } from 'leaflet';
import { MapComponent } from './map.component';
import { GenericGeoJSONFeature } from '@yaga/generic-geojson';
import { PopupDirective } from './popup.directive';
import { TooltipDirective } from './tooltip.directive';
export declare class PolylineDirective<T> extends Polyline implements OnDestroy, AfterViewInit {
    displayChange: EventEmitter<boolean>;
    strokeChange: EventEmitter<boolean>;
    colorChange: EventEmitter<string>;
    weightChange: EventEmitter<number>;
    opacityChange: EventEmitter<number>;
    lineCapChange: EventEmitter<string>;
    lineJoinChange: EventEmitter<string>;
    dashArrayChange: EventEmitter<string>;
    dashOffsetChange: EventEmitter<string>;
    fillChange: EventEmitter<boolean>;
    fillColorChange: EventEmitter<string>;
    fillOpacityChange: EventEmitter<number>;
    fillRuleChange: EventEmitter<string>;
    classNameChange: EventEmitter<string>;
    styleChange: EventEmitter<PathOptions>;
    latLngsChange: EventEmitter<LatLng[]>;
    geoJSONChange: EventEmitter<GenericGeoJSONFeature<GeoJSON.LineString | GeoJSON.MultiLineString, T>>;
    addEvent: EventEmitter<Event>;
    removeEvent: EventEmitter<Event>;
    popupopenEvent: EventEmitter<PopupEvent>;
    popupcloseEvent: EventEmitter<PopupEvent>;
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dbclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    contextmenuEvent: EventEmitter<MouseEvent>;
    popupDirective: PopupDirective;
    tooltipDirective: TooltipDirective;
    constructor(mapComponent: MapComponent);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setLatLngs(val: (Array<(LatLng | LatLngTuple | LatLngExpression)> | Array<Array<(LatLng | LatLngTuple | LatLngExpression)>>)): this;
    addLatLng(val: (LatLng | LatLngTuple | LatLngExpression) | Array<(LatLng | LatLngTuple | LatLngExpression)>): this;
    latLngs: LatLng[] | LatLng[][];
    geoJSON: GenericGeoJSONFeature<GeoJSON.LineString | GeoJSON.MultiLineString, T>;
    setStyle(style: PathOptions): this;
    opacity: number;
    stroke: boolean;
    color: string;
    weight: number;
    lineCap: LineCapShape;
    lineJoin: LineJoinShape;
    dashArray: string;
    dashOffset: string;
    fill: boolean;
    fillColor: string;
    fillOpacity: number;
    fillRule: FillRule;
    className: string;
    style: PolylineOptions;
    display: boolean;
    interactive: boolean;
    smoothFactor: number;
    noClip: boolean;
    properties: T;
}
