/// <reference types="leaflet" />
import { AfterContentInit, EventEmitter, OnDestroy } from '@angular/core';
import { DivIcon, DragEndEvent, Event, Icon, LatLng, LatLngLiteral, LatLngTuple, Marker, PopupEvent, TooltipEvent } from 'leaflet';
import { MapComponent } from './map.component';
import { DivIconDirective } from './div-icon.directive';
import { IconDirective } from './icon.directive';
import { PopupDirective } from './popup.directive';
import { TooltipDirective } from './tooltip.directive';
export declare class MarkerDirective extends Marker implements AfterContentInit, OnDestroy {
    positionChange: EventEmitter<LatLng>;
    latChange: EventEmitter<number>;
    lngChange: EventEmitter<number>;
    opacityChange: EventEmitter<number>;
    displayChange: EventEmitter<boolean>;
    zindexChange: EventEmitter<number>;
    draggableChange: EventEmitter<boolean>;
    iconChange: EventEmitter<Icon | DivIcon>;
    tooltipOpenedChange: EventEmitter<boolean>;
    popupOpenedChange: EventEmitter<boolean>;
    dragendEvent: EventEmitter<DragEndEvent>;
    dragstartEvent: EventEmitter<Event>;
    movestartEvent: EventEmitter<Event>;
    dragEvent: EventEmitter<Event>;
    moveendEvent: EventEmitter<Event>;
    addEvent: EventEmitter<Event>;
    removeEvent: EventEmitter<Event>;
    popupopenEvent: EventEmitter<PopupEvent>;
    popupcloseEvent: EventEmitter<PopupEvent>;
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dbclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    contextmenuEvent: EventEmitter<MouseEvent>;
    popupDirective: PopupDirective;
    tooltipDirective: TooltipDirective;
    iconDirective: IconDirective;
    divIconDirective: DivIconDirective;
    private initialized;
    constructor(mapComponent: MapComponent);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    display: boolean;
    setLatLng(val: LatLng | LatLngLiteral | LatLngTuple): this;
    position: LatLng;
    lat: number;
    lng: number;
    setOpacity(val: number): this;
    opacity: number;
    setIcon(val: Icon | DivIcon): this;
    icon: Icon | DivIcon;
    draggable: boolean;
    title: string;
    alt: string;
}
