/// <reference types="leaflet" />
import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { Event, KeyboardEvent, LatLngBounds, LatLngBoundsExpression, LayerEvent, LayersControlEvent, Map, MouseEvent, PopupEvent, ResizeEvent, TooltipEvent, ZoomAnimEvent } from 'leaflet';
/**
 * Root component for the map
 * @link http://leafletjs.com/reference-1.0.2.html#tilelayer Original Leaflet documentation
 * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Tile-Layer%20Directive Unit-Test
 * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/tile-layer.directive.js.html Test coverage
 * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/tilelayerdirective.html API documentation
 * @example https://leaflet-ng2.yagajs.org/latest/examples/tile-layer-directive
 */
export declare class MapComponent extends Map implements AfterViewInit {
    /**
     * Two-Way bound property for the zoom.
     * Use it with `<yaga-map [(zoom)]="someValue">` or `<yaga-map (zoomChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setzoom Original Leaflet documentation
     */
    zoomChange: EventEmitter<number>;
    /**
     * Two-Way bound property for the center latitude.
     * Use it with `<yaga-map [(lat)]="someValue">` or `<yaga-map (latChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setview Original Leaflet documentation
     */
    latChange: EventEmitter<number>;
    /**
     * Two-Way bound property for the center longitude.
     * Use it with `<yaga-map [(lng)]="someValue">` or `<yaga-map (lngChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setview Original Leaflet documentation
     */
    lngChange: EventEmitter<number>;
    /**
     * Two-Way bound property for the minimal available zoom.
     * Use it with `<yaga-map [(minZoom)]="someValue">` or `<yaga-map (minZoomChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setminzoom Original Leaflet documentation
     */
    minZoomChange: EventEmitter<number>;
    /**
     * Two-Way bound property for the maximal available zoom.
     * Use it with `<yaga-map [(maxZoom)]="someValue">` or `<yaga-map (maxZoomChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setmaxzoom Original Leaflet documentation
     */
    maxZoomChange: EventEmitter<number>;
    /**
     * Two-Way bound property for the bounds on the map.
     * Use it with `<yaga-map [(maxBoundsZoom)]="someValue">`
     * or `<yaga-map (maxBoundsZoomChange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setmaxbounds Original Leaflet documentation
     */
    maxBoundsChange: EventEmitter<LatLngBounds>;
    /**
     * From leaflet fired baselayerchange event.
     * Use it with `<yaga-tile-layer (baselayerchange)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-baselayerchange Original Leaflet documentation
     */
    baselayerchangeEvent: EventEmitter<LayersControlEvent>;
    /**
     * From leaflet fired overlayadd event.
     * Use it with `<yaga-tile-layer (overlayadd)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-overlayadd Original Leaflet documentation
     */
    overlayaddEvent: EventEmitter<LayersControlEvent>;
    /**
     * From leaflet fired overlayremove event.
     * Use it with `<yaga-tile-layer (overlayremove)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-overlayremove Original Leaflet documentation
     */
    overlayremoveEvent: EventEmitter<LayersControlEvent>;
    /**
     * From leaflet fired layeradd event.
     * Use it with `<yaga-tile-layer (layeradd)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-layeradd Original Leaflet documentation
     */
    layeraddEvent: EventEmitter<LayerEvent>;
    /**
     * From leaflet fired layerremove event.
     * Use it with `<yaga-tile-layer (layerremove)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-layerremove Original Leaflet documentation
     */
    layerremoveEvent: EventEmitter<LayerEvent>;
    /**
     * From leaflet fired zoomlevelschan event.
     * Use it with `<yaga-tile-layer (zoomlevelschan)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-zoomlevelschan Original Leaflet documentation
     */
    zoomlevelschangeEvent: EventEmitter<Event>;
    /**
     * From leaflet fired resize event.
     * Use it with `<yaga-tile-layer (resize)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-resize Original Leaflet documentation
     */
    resizeEvent: EventEmitter<ResizeEvent>;
    /**
     * From leaflet fired unload event.
     * Use it with `<yaga-tile-layer (unload)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-unload Original Leaflet documentation
     */
    unloadEvent: EventEmitter<Event>;
    /**
     * From leaflet fired viewreset event.
     * Use it with `<yaga-tile-layer (viewreset)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-viewreset Original Leaflet documentation
     */
    viewresetEvent: EventEmitter<Event>;
    /**
     * From leaflet fired load event.
     * Use it with `<yaga-tile-layer (load)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-load Original Leaflet documentation
     */
    loadEvent: EventEmitter<Event>;
    /**
     * From leaflet fired zoomstart event.
     * Use it with `<yaga-tile-layer (zoomstart)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-zoomstart Original Leaflet documentation
     */
    zoomstartEvent: EventEmitter<Event>;
    /**
     * From leaflet fired movestart event.
     * Use it with `<yaga-tile-layer (movestart)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-movestart Original Leaflet documentation
     */
    movestartEvent: EventEmitter<Event>;
    /**
     * From leaflet fired zoom event.
     * Use it with `<yaga-tile-layer (zoom)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-zoom Original Leaflet documentation
     */
    zoomEvent: EventEmitter<Event>;
    /**
     * From leaflet fired move event.
     * Use it with `<yaga-tile-layer (move)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-move Original Leaflet documentation
     */
    moveEvent: EventEmitter<Event>;
    /**
     * From leaflet fired zoomend event.
     * Use it with `<yaga-tile-layer (zoomend)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-zoomend Original Leaflet documentation
     */
    zoomendEvent: EventEmitter<Event>;
    /**
     * From leaflet fired moveend event.
     * Use it with `<yaga-tile-layer (moveend)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-moveend Original Leaflet documentation
     */
    moveendEvent: EventEmitter<Event>;
    /**
     * From leaflet fired popupopen event.
     * Use it with `<yaga-tile-layer (popupopen)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-popupopen Original Leaflet documentation
     */
    popupopenEvent: EventEmitter<PopupEvent>;
    /**
     * From leaflet fired popupclose event.
     * Use it with `<yaga-tile-layer (popupclose)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-popupclose Original Leaflet documentation
     */
    popupcloseEvent: EventEmitter<PopupEvent>;
    /**
     * From leaflet fired autopanstart event.
     * Use it with `<yaga-tile-layer (autopanstart)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-autopanstart Original Leaflet documentation
     */
    autopanstartEvent: EventEmitter<Event>;
    /**
     * From leaflet fired tooltipopen event.
     * Use it with `<yaga-tile-layer (tooltipopen)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-tooltipopen Original Leaflet documentation
     */
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    /**
     * From leaflet fired tooltipclose event.
     * Use it with `<yaga-tile-layer (tooltipclose)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-tooltipclose Original Leaflet documentation
     */
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    /**
     * From leaflet fired click event.
     * Use it with `<yaga-tile-layer (click)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-click Original Leaflet documentation
     */
    clickEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired dblclick event.
     * Use it with `<yaga-tile-layer (dblclick)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-dblclick Original Leaflet documentation
     */
    dblclickEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired mousedown event.
     * Use it with `<yaga-tile-layer (mousedown)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-mousedown Original Leaflet documentation
     */
    mousedownEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired mouseup event.
     * Use it with `<yaga-tile-layer (mouseup)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-mouseup Original Leaflet documentation
     */
    mouseupEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired mouseover event.
     * Use it with `<yaga-tile-layer (mouseover)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-mouseover Original Leaflet documentation
     */
    mouseoverEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired mouseout event.
     * Use it with `<yaga-tile-layer (mouseout)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-mouseout Original Leaflet documentation
     */
    mouseoutEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired mousemove event.
     * Use it with `<yaga-tile-layer (mousemove)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-mousemove Original Leaflet documentation
     */
    mousemoveEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired contextmenu event.
     * Use it with `<yaga-tile-layer (contextmenu)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-contextmenu Original Leaflet documentation
     */
    contextmenuEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired keypress event.
     * Use it with `<yaga-tile-layer (keypress)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-keypress Original Leaflet documentation
     */
    keypressEvent: EventEmitter<KeyboardEvent>;
    /**
     * From leaflet fired preclick event.
     * Use it with `<yaga-tile-layer (preclick)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-preclick Original Leaflet documentation
     */
    preclickEvent: EventEmitter<MouseEvent>;
    /**
     * From leaflet fired zoomanim event.
     * Use it with `<yaga-tile-layer (zoomanim)="processEvent($event)">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-zoomanim Original Leaflet documentation
     */
    zoomanimEvent: EventEmitter<ZoomAnimEvent>;
    protected domRoot: HTMLElement;
    protected mapDomRoot: HTMLElement;
    private moveTimeout;
    private isZooming;
    constructor(elementRef: ElementRef);
    /**
     * This function gets called from Angular after initializing the html-component.
     * @link https://angular.io/docs/ts/latest/api/core/index/AfterViewInit-class.html
     */
    ngAfterViewInit(): void;
    /**
     * Two-Way bound property for the zoom.
     * Use it with `<yaga-map [(zoom)]="someValue">` or `<yaga-map [zoom]="someValue">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setzoom Original Leaflet documentation
     */
    zoom: number;
    /**
     * Two-Way bound property for the latitude.
     * Use it with `<yaga-map [(lat)]="someValue">` or `<yaga-map [lat]="someValue">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setview Original Leaflet documentation
     */
    lat: number;
    /**
     * Two-Way bound property for the longitude.
     * Use it with `<yaga-map [(lng)]="someValue">` or `<yaga-map [lng]="someValue">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setview Original Leaflet documentation
     */
    lng: number;
    /**
     * Derived method of the original setMinZoom method.
     * @link http://leafletjs.com/reference-1.0.2.html#map-setminzoom Original Leaflet documentation
     */
    setMinZoom(val: number): this;
    /**
     * Two-Way bound property for the minimal availabe zoom.
     * Use it with `<yaga-map [(minZoom)]="someValue">` or `<yaga-map [minZoom]="someValue">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setminzoom Original Leaflet documentation
     */
    minZoom: number;
    /**
     * Derived method of the original setMaxZoom method.
     * @link http://leafletjs.com/reference-1.0.2.html#map-setmaxzoom Original Leaflet documentation
     */
    setMaxZoom(val: number): this;
    /**
     * Two-Way bound property for the maximal availabe zoom.
     * Use it with `<yaga-map [(maxZoom)]="someValue">` or `<yaga-map [maxZoom]="someValue">`
     * @link http://leafletjs.com/reference-1.0.2.html#map-setmaxzoom Original Leaflet documentation
     */
    maxZoom: number;
    setMaxBounds(bounds: LatLngBoundsExpression): this;
    maxBounds: LatLngBounds;
    closePopupOnClick: boolean;
    zoomSnap: number;
    zoomDelta: number;
    trackResize: boolean;
    boxZoomEnabled: boolean;
    doubleClickZoomEnabled: boolean;
    draggingEnabled: boolean;
    fadeAnimation: boolean;
    markerZoomAnimation: boolean;
    transform3DLimit: number;
    zoomAnimation: boolean;
    zoomAnimationThreshold: number;
    inertia: boolean;
    inertiaDeceleration: number;
    inertiaMaxSpeed: number;
    easeLinearity: number;
    worldCopyJump: boolean;
    maxBoundsViscosity: number;
    keyboardEnabled: boolean;
    keyboardPanDelta: number;
    scrollWheelZoomEnabled: boolean;
    wheelDebounceTime: number;
    wheelPxPerZoomLevel: number;
    tapEnabled: boolean;
    tapTolerance: number;
    bounceAtZoomLimits: boolean;
    touchZoomEnabled: boolean;
}
