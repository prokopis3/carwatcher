"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var leaflet_1 = require("leaflet");
var consts_1 = require("./consts");
var IconDirective = (function (_super) {
    __extends(IconDirective, _super);
    function IconDirective() {
        var _this = _super.call(this, {
            iconUrl: consts_1.TRANSPARENT_PIXEL,
        }) || this;
        _this.updateEvent = new core_1.EventEmitter();
        return _this;
    }
    Object.defineProperty(IconDirective.prototype, "className", {
        get: function () {
            return this.options.className;
        },
        set: function (val) {
            this.options.className = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "iconUrl", {
        get: function () {
            return this.options.iconUrl;
        },
        set: function (val) {
            this.options.iconUrl = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "iconRetinaUrl", {
        get: function () {
            return this.options.iconRetinaUrl;
        },
        set: function (val) {
            this.options.iconRetinaUrl = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "iconSize", {
        get: function () {
            return this.options.iconSize;
        },
        set: function (val) {
            this.options.iconSize = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "iconAnchor", {
        get: function () {
            return this.options.iconAnchor;
        },
        set: function (val) {
            this.options.iconAnchor = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "popupAnchor", {
        get: function () {
            return this.options.popupAnchor;
        },
        set: function (val) {
            this.options.popupAnchor = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "shadowUrl", {
        get: function () {
            return this.options.shadowUrl;
        },
        // We have to wait for adding the definition for tooltipAnchor
        // see: https://github.com/yagajs/leaflet-ng2/issues/220#issuecomment-307634276
        //
        // @Input() public set tooltipAnchor(val: Point) {
        //     this.options.tooltipAnchor = val;
        //     this.updateEvent.emit({
        //         target: this,
        //         type: 'update',
        //     });
        // }
        // public get tooltipAnchor(): Point {
        //     return (<Point> this.options.popupAnchor);
        // }
        set: function (val) {
            this.options.shadowUrl = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "shadowRetinaUrl", {
        get: function () {
            return this.options.shadowRetinaUrl;
        },
        set: function (val) {
            this.options.shadowRetinaUrl = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "shadowSize", {
        get: function () {
            return this.options.shadowSize;
        },
        set: function (val) {
            this.options.shadowSize = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconDirective.prototype, "shadowAnchor", {
        get: function () {
            return this.options.shadowAnchor;
        },
        set: function (val) {
            this.options.shadowAnchor = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    return IconDirective;
}(leaflet_1.Icon));
IconDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'yaga-icon',
            },] },
];
/** @nocollapse */
IconDirective.ctorParameters = function () { return []; };
IconDirective.propDecorators = {
    'updateEvent': [{ type: core_1.Output, args: ['update',] },],
    'className': [{ type: core_1.Input },],
    'iconUrl': [{ type: core_1.Input },],
    'iconRetinaUrl': [{ type: core_1.Input },],
    'iconSize': [{ type: core_1.Input },],
    'iconAnchor': [{ type: core_1.Input },],
    'popupAnchor': [{ type: core_1.Input },],
    'shadowUrl': [{ type: core_1.Input },],
    'shadowRetinaUrl': [{ type: core_1.Input },],
    'shadowSize': [{ type: core_1.Input },],
    'shadowAnchor': [{ type: core_1.Input },],
};
exports.IconDirective = IconDirective;
//# sourceMappingURL=icon.directive.js.map