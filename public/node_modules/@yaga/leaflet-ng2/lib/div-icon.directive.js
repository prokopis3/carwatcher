"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var leaflet_1 = require("leaflet");
var DivIconDirective = (function (_super) {
    __extends(DivIconDirective, _super);
    function DivIconDirective(elementRef) {
        var _this = _super.call(this, {}) || this;
        _this.updateEvent = new core_1.EventEmitter();
        _this.contentHtml = elementRef.nativeElement;
        return _this;
    }
    Object.defineProperty(DivIconDirective.prototype, "iconSize", {
        get: function () {
            return this.options.iconSize;
        },
        set: function (val) {
            this.options.iconSize = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DivIconDirective.prototype, "iconAnchor", {
        get: function () {
            return this.options.iconAnchor;
        },
        set: function (val) {
            this.options.iconAnchor = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DivIconDirective.prototype, "popupAnchor", {
        get: function () {
            return this.options.popupAnchor;
        },
        set: function (val) {
            this.options.popupAnchor = val;
            this.updateEvent.emit({
                target: this,
                type: 'update',
            });
        },
        enumerable: true,
        configurable: true
    });
    DivIconDirective.prototype.createIcon = function (oldDivIcon) {
        var clonedOptions = Object.create(this.options);
        clonedOptions.html = '';
        oldDivIcon = _super.prototype.createIcon.call({ options: clonedOptions }, oldDivIcon);
        oldDivIcon.appendChild(this.contentHtml.cloneNode(true));
        return oldDivIcon;
    };
    return DivIconDirective;
}(leaflet_1.DivIcon));
DivIconDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'yaga-icon',
            },] },
];
/** @nocollapse */
DivIconDirective.ctorParameters = function () { return [
    { type: core_1.ElementRef, decorators: [{ type: core_1.Inject, args: [core_1.ElementRef,] },] },
]; };
DivIconDirective.propDecorators = {
    'updateEvent': [{ type: core_1.Output, args: ['update',] },],
    'iconSize': [{ type: core_1.Input },],
    'iconAnchor': [{ type: core_1.Input },],
    'popupAnchor': [{ type: core_1.Input },],
};
exports.DivIconDirective = DivIconDirective;
//# sourceMappingURL=div-icon.directive.js.map